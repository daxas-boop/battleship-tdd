{"version":3,"sources":["components/Gameboard.jsx","factories/Ship.js","factories/Gameboard.js","factories/Player.js","factories/AI.js","components/customHooks/useGameLoop.js","components/Dialog.jsx","components/Game.jsx","components/Header.jsx","components/App.jsx","index.js"],"names":["Board","styled","div","Wrapper","section","Row","Cell","CellNoHover","MissedShot","HitShip","Ship","Title","h3","Coordinates","Lives","p","Gameboards","props","humanGameboard","aiGameboard","cellOnClick","shipsRemaining","style","color","data-testid","map","row","i","Fragment","key","uniqid","element","String","fromCharCode","humanShips","cell","className","data-cord1","indexOf","data-cord2","onClick","e","Number","target","dataset","cord1","cord2","data-player","player","AIShips","shipFactory","length","shipLife","Array","fill","hit","position","splice","isSunk","every","val","Gameboard","board","fleet","getRandomCoordinates","ship","vertical","Math","floor","random","column","forEach","coordinates","validVerticalCoordinates","placeShipVertically","validHorizontalCoordinates","placeShipHorizontally","getBoard","receiveAttack","col","b","calculateShipPosition","allShipsSunk","getShipsRemaining","acc","PlayerHuman","gameboard","getName","turn","getGameboard","AIPlayer","a","push","randomAttack","randomIndex","randomCoordinate","useGameLoop","useState","winner","setWinner","remainingShips","setRemainingShips","human","humanPlayer","newGameboard","AI","players","setPlayers","useEffect","changePlayersTurn","prevState","checkWinner","isShipHit","enemyGameboard","AIPlay","setTimeout","randomCoords","startNewGame","newPlayers","DialogContainer","IconLink","Dialog","alignSelf","width","marginLeft","href","rel","Button","button","StateTurn","Menu","HowToPlay","WinnerContainer","h4","Container","Game","renderMenu","setRenderMenu","renderGameboards","setRenderGameboards","renderHowtoPlay","setRenderHowToPlay","renderWinner","setRenderWinner","header","h1","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21bede88.chunk.js","sourcesContent":["import React from 'react';\nimport uniqid from 'uniqid';\nimport styled from '@emotion/styled';\nimport \"nes.css/css/nes.min.css\";\n\nconst Board = styled.div `\n    display:grid;\n    grid-template-rows: repeat(11, 1fr);\n    grid-template-columns: repeat(11, 1fr);\n    grid-auto-flow: column;\n    width:500px;\n    height:500px;\n    margin:0 auto;\n    line-height:0;\n\n    @media(max-width:1366px) {\n        width:400px;\n        height:400px;\n    }\n\n    @media(max-width:1024px) {\n        width: 300px;\n        height: 300px;\n    }\n\n    @media(max-width:768px) {\n        width: 250px;\n        height: 250px;\n    }\n\n    @media(max-width:320px) {\n        width: 200px;\n        height: 200px;\n    }\n`\n\nconst Wrapper = styled.section `\n    border: 4px solid #002c66;\n    margin:10px;\n\n    @media(max-width:1366px) {\n        margin:10px 20px; \n    }\n\n    @media(max-width:1024px) {\n        margin:0;\n    }\n\n    @media(max-width:768px) {\n        margin:0;\n    }\n\n    @media(max-width:320px) {\n        margin:0;\n    }\n`\n\nconst Row = styled.div `\n    grid-column: 1/12;\n    display:grid;\n    grid-template-columns: repeat(11, 1fr);\n`\n\nconst Cell = styled.div `\n    display:flex;\n    border:1px solid #002c66;\n    background-color: #2389da;\n    &:hover{\n        background-color: purple;\n    }\n`\n\nconst CellNoHover = styled.div `\n    display:flex;\n    border:1px solid #002c66;\n    background-color: #2389da;\n`\n\nconst MissedShot = styled.div `\n    background-color: #2389da;\n    border:1px solid #002c66;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n\n    @media(max-width:768px) {\n        font-size: 14px;\n    }\n`\n\nconst HitShip = styled.div `\n    background-color: red;\n    border:1px solid #002c66;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    font-family:'Roboto';\n`\n\nconst Ship = styled.div `\n    border:1px solid #002c66;\n    background-color:blue;\n`\n\nconst Title = styled.h3 `\n    text-align:center;\n    margin-top:20px;\n    margin-bottom:20px;\n\n    @media(max-width:768px) {\n        font-size: 14px;\n        margin:4px 0;\n    }\n`\n\nconst Coordinates = styled.div `\n    background-color:#eee;\n    display:flex;\n    align-items:center;\n    justify-content:center;\n`\n\nconst Lives = styled.p `\n    margin-top:10px;\n    text-align:center;\n\n    @media(max-width:768px) {\n        font-size:14px;\n        margin:25px 0;\n    }\n`\n\n\nconst Gameboards = (props) => {\n    const {humanGameboard, aiGameboard, cellOnClick, shipsRemaining} = props;\n\n    return(\n        <>\n            <Wrapper>\n                <Title style={{color:'green'}}>Your board</Title>\n                <Board  data-testid='human-gameboard'>\n                    {humanGameboard.map((row,i)=>\n                    <React.Fragment key={uniqid()}>\n                        <Row key={uniqid()}>\n                            {row.map((element, i) => \n                                typeof element === 'object' ?\n                                <Ship data-testid='ship' key={uniqid()}> </Ship> \n                                : element === 0 ?\n                                    <CellNoHover \n                                        data-testid='cell-no-hover' \n                                        key={uniqid()}>\n                                    </CellNoHover>\n                                : element === 'x' ? \n                                    <MissedShot \n                                        data-testid='missed-shot' \n                                        key={uniqid()}>\n                                    ×</MissedShot>\n                                : element === 'sunked ship' &&\n                                    <HitShip \n                                        data-testid='hit-ship'\n                                        key={uniqid()}>\n                                    !</HitShip>\n                                )\n                            }\n                            <Coordinates key={uniqid()}>{String.fromCharCode(65+i)}</Coordinates>\n                        </Row>\n                            <Coordinates key={uniqid()}>{i}</Coordinates>\n                    </React.Fragment>\n                    )}\n                </Board>\n                <Lives>Your ships alive: {shipsRemaining.humanShips}</Lives>\n            </Wrapper>    \n\n            <Wrapper>\n                <Title style={{color:'red'}}>Enemy board</Title>\n                <Board data-testid='ai-gameboard'>\n                    {aiGameboard.map((row,i) => \n                    <React.Fragment key={uniqid()}>\n                        <Row key={uniqid()}>\n                            {row.map((cell, i) => \n                                typeof cell === 'object' || cell === 0 ? \n                                    <Cell \n                                    data-testid='cell'\n                                    className='nes-pointer'\n                                    key={uniqid()}\n                                    data-cord1={aiGameboard.indexOf(row)}\n                                    data-cord2={i}\n                                    onClick={(e) => cellOnClick(Number(e.target.dataset.cord1),Number(e.target.dataset.cord2))}\n                                    data-player={props.player} \n                                    />\n                                : cell === 'x' ? \n                                    <MissedShot \n                                        data-testid='missed-shot'\n                                        key={uniqid()}>\n                                    ×</MissedShot> \n                                : cell === 'sunked ship' &&\n                                    <HitShip\n                                        data-testid='hit-ship'\n                                        key={uniqid()}>\n                                    !</HitShip>\n                            )}\n                            <Coordinates key={uniqid()}>{String.fromCharCode(65+i)}</Coordinates>\n                        </Row>\n                        <Coordinates key={uniqid()}>{i}</Coordinates>\n                    </React.Fragment>\n                    )}\n                </Board>\n                <Lives>Enemy ships alive: {shipsRemaining.AIShips}</Lives>\n            </Wrapper>\n        </>\n    )\n}\n\nexport default Gameboards;\n","const shipFactory = (length) => {\n    const shipLife = new Array(length).fill('o');\n\n    const hit = (position) => {\n        if (position < 0 || typeof position === 'undefined') return;\n        shipLife.splice(position, 1, 'hit');\n    }\n\n    const isSunk = () => shipLife.every((val) => val === 'hit');\n\n    return {length, hit, isSunk}\n}\n\nexport default shipFactory;","import shipFactory from './Ship';\n\nconst Gameboard = () => {\n    const board = [\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    ];\n\n    const fleet = [\n        shipFactory(5),\n        shipFactory(4),\n        shipFactory(3),\n        shipFactory(2),\n        shipFactory(1)\n    ]\n\n    const placeShipHorizontally = (coordinates, ship) => {\n        let {row, column} = coordinates;\n        for(let i=0; i < ship.length; i++){\n            board[column].splice(row, 1, ship)\n            row++;\n        }\n    }\n\n    const placeShipVertically = (coordinates, ship) => {\n        let {row, column} = coordinates;\n        for(let i=0; i < ship.length; i++){\n            board[column].splice(row, 1, ship)\n            column++;\n        }\n    }\n\n    const getRandomCoordinates = (ship, vertical) => {\n        if(vertical){\n            const row = Math.floor(Math.random() * 10);\n            const column = Math.floor(Math.random() * (10-ship.length));\n            return {row, column}\n        } else {\n            const row = Math.floor(Math.random() * (10-ship.length+1));\n            const column = Math.floor(Math.random() * 10);\n            return {row, column}\n        }\n    }\n\n    const placeShipsRandomly = () => {\n        fleet.forEach(ship => {\n            const vertical = Math.random() > 0.5;\n            if(vertical){\n                let coordinates = getRandomCoordinates(ship, vertical);\n                while(!validVerticalCoordinates(board, coordinates, ship)){\n                    coordinates = getRandomCoordinates(ship, vertical);\n                }\n                placeShipVertically(coordinates, ship);\n            } else {\n                let coordinates = getRandomCoordinates(ship);\n                while(!validHorizontalCoordinates(board, coordinates, ship)){\n                    coordinates = getRandomCoordinates(ship);\n                }\n                placeShipHorizontally(coordinates, ship);\n            }\n        })\n    }\n    placeShipsRandomly();\n\n    const calculateShipPosition = (col, row) => {\n        const ship = board[col][row];\n        let i = 0;\n        let b = 0;\n        if (col === 9) {\n            while(board[col][row+i] === ship || board[col][row+i] === 'sunked ship') i++;\n        } else {\n            while(board[col][row+i] === ship || board[col][row+i] === 'sunked ship'){\n                i++;\n            }\n    \n            while(board[col+b][row] === ship || board[col+b][row] === 'sunked ship'){\n                b++;\n            }\n        }\n        if(i > 1) {\n            return ship.length - i\n        }\n        else if(b > 1) {\n            return ship.length - b\n        }\n        else{\n            return ship.length - i\n        }\n    }\n\n    const receiveAttack = (column, row) => {\n        if (typeof board[column][row] === 'object') {\n            const position = calculateShipPosition(column, row);\n            board[column][row].hit(position);\n            board[column][row] = 'sunked ship';\n        } else {\n            board[column][row] = 'x'\n        }\n    }\n\n    const allShipsSunk = () => {\n        return fleet.every(ship => ship.isSunk());\n    }\n\n    const getShipsRemaining = () => {\n        let acc = 0;\n        fleet.forEach( (ship) => {\n            if(!ship.isSunk()) acc++;\n        })\n        return acc;\n    }\n\n    const getBoard = () => board;\n\n    return {getBoard, receiveAttack, allShipsSunk, getShipsRemaining};\n}\n\nexport default Gameboard;\n\nconst validVerticalCoordinates = (board,coordinates,ship) => {\n    let {row,column} = coordinates;\n\n    for (let i=0; i<=ship.length; i++) {\n        if(column === 0) {\n            //checks the sides\n            if(typeof board[column+i][row-1] === 'object' || typeof board[column+i][row+1] === 'object'){ \n                return false\n            }\n\n            //checks down\n            if(typeof board[column+i][row] === 'object'){\n                return false\n            }\n        }\n        else if(column === 9) {\n            //checks the sides\n            if(typeof board[column-1][row+1] === 'object' || typeof board[column-1][row-1] === 'object'){ \n                return false\n            }\n\n            //checks up\n            if(typeof board[column-1][row] === 'object'){\n                return false\n            }\n        }\n        else {\n            //checks the sides\n            if(typeof(board[column+i][row-1]) === 'object' || typeof(board[column+i][row+1]) === 'object'){ \n                return false\n            }\n    \n            //checks down\n            if(typeof board[column+i][row] === 'object'){\n                return false\n            }\n    \n            //checks up\n            if(typeof board[column-1][row-1] === 'object' || typeof board[column-1][row+1] === 'object' \n            || typeof board[column-1][row] === 'object'){\n                return false\n            }\n        }\n    }\n\n    return true;\n}\n\nconst validHorizontalCoordinates = (board,coordinates,ship) => {\n    let {row,column} = coordinates;\n\n    for (let i=0; i<=ship.length; i++) {\n        if(column === 0) {\n            //checks the sides\n            if(typeof board[column][row+i] === 'object' || typeof board[column][row-1] === 'object'){ \n                return false\n            }\n\n            //checks down\n            if(typeof board[column+1][row+i] === 'object'|| typeof board[column+1][row-1] === 'object'){\n                return false\n            }\n        }\n        else if(column === 9) {\n            //checks the sides\n            if(typeof board[column][row+i] === 'object' || typeof board[column][row-1] === 'object'){ \n                return false\n            }\n\n            //checks up\n            if(typeof board[column-1][row+i] === 'object' || typeof board[column-1][row-1] === 'object'){\n                return false\n            }\n        }\n        else {\n            //checks the sides\n            if(typeof(board[column][row+i]) === 'object' || typeof(board[column][row-1]) === 'object'){ \n                return false\n            }\n    \n            //checks down\n            if(typeof board[column+1][row+i] === 'object' || typeof board[column+1][row-1] === 'object'){\n                return false\n            }\n    \n            //checks up\n            if(typeof board[column-1][row+i] === 'object' || typeof board[column-1][row-1] === 'object'){\n                return false\n            }\n        }\n    }\n\n    return true;\n}\n","const PlayerHuman = (gameboard) => {\n    let turn = true;\n    const getName = () => 'HUMAN';\n    const getGameboard = () => gameboard;\n\n    return {getName, turn, getGameboard}\n}\n\nexport default PlayerHuman;\n","const AIPlayer = (gameboard) => {\n    let turn = false;\n\n    const coordinates = [];\n    for(let a=0; a<10;a++){\n        for(let i=0; i<10;i++){\n            coordinates.push([a,i])\n        }\n    }\n    \n    const randomAttack = () => {\n        const randomIndex = Math.floor(Math.random() * coordinates.length);\n        const randomCoordinate = coordinates[randomIndex];\n        coordinates.splice(randomIndex,1)\n        return [randomCoordinate[0], randomCoordinate[1]]\n    }\n\n    const getGameboard = () => gameboard;\n    const getName = () => 'AI'\n\n    return {randomAttack, turn, getGameboard, getName}\n}\n\nexport default AIPlayer;\n","import {useState, useEffect} from 'react';\nimport newGameboard from '../../factories/Gameboard';\nimport humanPlayer from '../../factories/Player';\nimport AIPlayer from '../../factories/AI';\n\n\nconst useGameLoop = () => {\n    const [winner, setWinner] = useState(null);\n    const [remainingShips, setRemainingShips] = useState();\n    const [players, setPlayers] = useState({\n        human: humanPlayer(newGameboard()),\n        AI: AIPlayer(newGameboard())\n    });\n    \n    useEffect(() => {\n        players && setRemainingShips({\n            humanShips: players.human.getGameboard().getShipsRemaining(),\n            AIShips: players.AI.getGameboard().getShipsRemaining()\n        })\n    }, [players])\n\n    const startNewGame = () => {\n        const newPlayers = {\n            human: humanPlayer(newGameboard()),\n            AI: AIPlayer(newGameboard())\n        }\n        setPlayers(newPlayers);\n        setWinner(null);\n    }\n\n    const changePlayersTurn = () => {\n        setPlayers(prevState => ({\n            human: {\n                ...prevState.human,\n                turn: !prevState.human.turn\n            },\n            AI:{\n                ...prevState.AI,\n                turn: !prevState.AI.turn\n            }\n        }))\n    }\n\n    const checkWinner = () => {\n        if (players.human.getGameboard().allShipsSunk()){\n            setWinner(players.AI.getName());\n        } else if (players.AI.getGameboard().allShipsSunk()){\n            setWinner(players.human.getName());\n        }\n    }\n\n    const isShipHit = (enemyGameboard, column, row) => {\n        const enemyBoard = enemyGameboard.getBoard();\n        return (enemyBoard[column][row] === 'sunked ship');\n    } \n\n    const AIPlay = () => {\n        setTimeout(() => {\n            const randomCoords = players.AI.randomAttack();\n            const column = randomCoords[0];\n            const row = randomCoords[1];\n            const enemyGameboard = players.human.getGameboard();\n\n            enemyGameboard.receiveAttack(column, row);\n            if (isShipHit(enemyGameboard,column,row)) {\n                setPlayers(prevState => ({...prevState}))\n                checkWinner();\n                setTimeout(() => {AIPlay()}, 300);\n                return;\n            }\n            changePlayersTurn();\n        }, 300);\n    }\n\n    const cellOnClick = (column, row) => {\n        const enemyGameboard = players.AI.getGameboard();\n        enemyGameboard.receiveAttack(column, row);\n\n        if (isShipHit(enemyGameboard,column,row)) {\n            setPlayers(prevState => ({...prevState}))\n            checkWinner(); \n            return;\n        }\n        \n        changePlayersTurn();\n        AIPlay();\n    }\n\n    return {cellOnClick, players, winner, startNewGame, remainingShips}\n}\n\nexport default useGameLoop;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst DialogContainer = styled.section `\n    display:flex;\n    margin:20px;\n`\n\nconst IconLink = styled.a `\n    text-align:center;\n    margin-top:20px;\n`\n\nconst Dialog = () => {\n    return(\n            <DialogContainer className=\"message -left\">\n                <i className=\"nes-bcrikko\" style={{alignSelf: 'flex-end'}}></i>\n                <section className=\"nes-balloon from-left is-dark\" style={{width:'75%', marginLeft:30}} >\n                    <p>This game was created by daxas-boop.</p>\n                    <IconLink href='https://github.com/daxas-boop/' target='_blank' rel=\"noopener noreferrer\">\n                        <i className='nes-icon github nes-pointer is-medium'></i>\n                    </IconLink>\n                </section>\n            </DialogContainer>\n    )\n}\n\nexport default Dialog;\n","import React,{useState, useEffect} from 'react';\nimport Gameboards from './Gameboard';\nimport styled from '@emotion/styled';\nimport useGameLoop from './customHooks/useGameLoop';\nimport Dialog from './Dialog';\nimport \"nes.css/css/nes.min.css\";\n\nconst Button = styled.button `\n    display:flex;\n    margin:20px auto;\n`\n\nconst StateTurn = styled.h3 `\n    text-align:center;\n    margin-top:20px;\n    grid-column:1/3;\n\n    @media(max-width:768px) {\n        grid-row:2/3;\n        grid-column:1/2;\n        margin:2px;\n    }\n`\n\nconst Menu = styled.div `\n    margin:45px auto !important;\n    display:flex;\n    flex-direction:column;\n    width:300px;\n    position:static;\n\n    @media(max-width:320px) {\n        width:250px;\n    }\n`\n\nconst IconLink = styled.a `\n    text-align:center;\n    margin-top:20px;\n`\n\nconst HowToPlay = styled.div `\n    position:absolute !important;\n    width:450px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    border:4px solid white;\n    padding:15px;\n    text-align:center;\n    max-width:100vw;\n    \n    @media(max-width:320px) {\n        top:55%;\n        width:280px;\n    }\n`\n\nconst WinnerContainer = styled.div `\n    position:absolute !important;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    height:400px;\n    width:500px;\n    border:4px solid white;\n    padding:2px;\n`\n\nconst Title = styled.h4 `\n    margin-top:20px;\n    text-align:center;\n`\n\nconst Container = styled.div `\n    display:grid;\n    grid-template-rows: 50px 1fr;\n    grid-template-columns: 1fr 1fr;\n    height: 500px;\n    margin-top:20px;\n\n    @media(max-width:768px) {\n        grid-template-columns:1fr;\n        height: 300px;\n        grid-template-rows: 360px 30px 360px;\n    }\n\n    @media(max-width:320px) {\n        grid-template-columns:1fr;\n        height: 300px;\n        grid-template-rows: 300px 30px 300px;\n    }\n`\n\nconst Game = () => {\n    const {cellOnClick, players, winner, startNewGame, remainingShips} = useGameLoop();\n    const [renderMenu, setRenderMenu] = useState(true);\n    const [renderGameboards, setRenderGameboards]= useState(false);\n    const [renderHowtoPlay, setRenderHowToPlay] = useState(false);\n    const [renderWinner, setRenderWinner] = useState(false);\n\n    useEffect(() => {\n        winner ? setRenderWinner(true) : setRenderWinner(false);\n    }, [winner])\n\n    const handleNewGame = () => {\n        startNewGame();\n        setRenderMenu(false); \n        setRenderGameboards(true);\n    }\n\n    return (\n        <>\n            {renderMenu && \n                <Menu className='nes-container is-rounded'>\n                    <Button \n                        className='nes-btn' \n                        onClick={() => handleNewGame()}>\n                        New game\n                    </Button>\n\n                    <Button \n                        className='nes-btn' \n                        onClick={() => setRenderHowToPlay(true)}>\n                        How to Play\n                    </Button>\n\n                    <IconLink href='https://github.com/daxas-boop/' target='_blank' rel=\"noopener noreferrer\">\n                        <i className='nes-icon github nes-pointer is-medium'></i>\n                    </IconLink>\n\n                    {renderHowtoPlay && \n                        <HowToPlay \n                        data-testid=\"how-to-play\"\n                        className=\"nes-dialog is-dark\">\n                            <p>Click in a coordinate.</p>\n                            <p>If you hit the enemy ship keep playing.</p>\n                            <p>Otherwise it's the Computers turn.</p>\n                            <p>Whoever destroys all enemy ships first wins.</p>\n                                <Button className=\"nes-btn is-primary\" onClick={() => setRenderHowToPlay(false)} >Continue</Button>\n                        </HowToPlay>}\n                </Menu>\n            }\n\n            {renderGameboards &&\n                <Container>\n                    <StateTurn>{players.human.turn ? 'Your turn' : 'Computer\\'s turn.'}</StateTurn>\n                    <Gameboards\n                        cellOnClick={cellOnClick}\n                        humanGameboard={players.human.getGameboard().getBoard()}\n                        aiGameboard={players.AI.getGameboard().getBoard()}\n                        shipsRemaining={remainingShips}\n                    />\n                </Container>\n            }\n\n            {renderWinner &&\n                <WinnerContainer \n                data-testid=\"winner-container\"\n                className='nes-dialog is-dark'>\n                    <Title>{winner === 'HUMAN' ?  'YOU WON !!' : 'YOU LOST :('}</Title> \n                    <Button \n                        className='nes-btn is-primary' \n                        onClick={()=> startNewGame()}>\n                        Play again?\n                    </Button>\n                    <Dialog />\n                </WinnerContainer>\n            }\n        </>\n    )\n}\n\nexport default Game;","import React from 'react'\nimport styled from '@emotion/styled';\n\nconst Container = styled.header `\n    height:75px;\n    display:flex;\n    align-items:center;\n    border-bottom: 4px solid #D3D3D3;\n`\n\nconst Title = styled.h1 `\n    margin-top:10px;  \n    color: black;\n    flex-grow:2;\n    text-align:center;\n\n    @media(max-width:768px) {\n        font-size:18px;\n    }\n\n    @media(max-width:320px) {\n        font-size:14px;\n    }\n`\n\nconst Header = () => {\n    return (\n        <Container className='container'>\n            <Title>Battleship TDD</Title>\n        </Container>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport Game from './Game';\nimport Header from './Header';\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Game />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}